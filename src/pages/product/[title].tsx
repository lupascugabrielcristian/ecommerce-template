import { loadStripe, Stripe } from "@stripe/stripe-js";
import { useMutation, useQueries, useQuery } from "@tanstack/react-query";
import Head from "next/head";
import { useRouter } from "next/router";
import Navbar from "../../components/navbar";
import Skelton from "../../components/skelton";

const stripePromiseClientSide = loadStripe(
    process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

const SingleProduct = () => {
    const router = useRouter();

    const getSingleProduct = async () => {
        try {
            const title = router?.query?.title;

            const respJSON = await fetch(`/api/products/${title}`);
            const resp = await respJSON.json();
            return resp;
        }
        catch (error){
            throw error;
        }
    }

    const { mutate, isLoading: mutationIsLoading } = useMutation(
        async (body:any) => {
            try {
                const respJSON = await fetch("/api/create-checkcout-session", {
                    method: "POST",
                    body: JSON.stringify(body)
                });

                const resp = await respJSON.json();
                const stripe = (await stripePromiseClientSide) as Stripe;
                const result = await stripe.redirectToCheckout({
                    sessionId: resp.id
                });
                return result;
            }
            catch(error) {
                throw error;
            }
        }
    );

    const { data, isLoading } = useQuery(
        [`singleProduct, ${router?.query?.title}`],
        getSingleProduct,
        {
            enabled: !!router?.query?.title
        }
    );

    const product = data?.product;

    return (
        <div>
            <Head>
                <title>{isLoading ? "Loading...": `${product?.title}`}</title>

                <meta name="description" content="Generated by next" />

                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="container mx-6 md:mx-auto">
                <Navbar />

                {isLoading ? ( <Skelton />): (
                    <div></div>
                )}
            </main>
        </div>
    )
}

export default SingleProduct;